#BlueJ class context
comment0.params=
comment0.target=org.apache.commons.csv.CSVParser\ loadCSV()
comment1.params=path
comment1.target=org.apache.commons.csv.CSVParser\ loadCSV(java.lang.String)
comment10.params=year\ name\ gender
comment10.target=int\ getTotalBirthsRankedHigher(int,\ java.lang.String,\ java.lang.String)
comment10.text=\n\ Gets\ the\ total\ number\ of\ births\ of\ babies\ with\ the\ same\ gender\ in\ the\ given\ year\n\ with\ names\ that\ are\ ranked\ higher\ than\ name.\n\ @param\ year\n\ @param\ name\n\ @param\ gender\n\ @return\ the\ number\ of\ births,\ returns\ -1\ if\ name-gender\ pair\ is\ not\ found\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment2.params=file
comment2.target=org.apache.commons.csv.CSVParser\ loadCSV(java.io.File)
comment3.params=
comment3.target=void\ totalBirths()
comment3.text=\n\ prints\ total\ number\ of\ births,\ male\ births\ and\ female\ births\ and\ total\n\ number\ of\ names,\ male\ names\ and\ female\ names.\n
comment4.params=csv\ name\ gender
comment4.target=int\ getRank(org.apache.commons.csv.CSVParser,\ java.lang.String,\ java.lang.String)
comment4.text=\n\ Returns\ the\ rank\ of\ given\ name\ in\ the\ given\ year's\ file,\ for\ the\ given\ gender\n\ @param\ year\n\ @param\ name\n\ @param\ gender\ F\ for\ female,\ M\ for\ male\n\ @return\ an\ integer\ rank\ of\ the\ name,\ returns\ -1\ if\ name\ is\ not\ found\ in\ the\ file\n
comment5.params=year\ name\ gender
comment5.target=int\ getRank(int,\ java.lang.String,\ java.lang.String)
comment6.params=year\ rank\ gender
comment6.target=java.lang.String\ getName(int,\ int,\ java.lang.String)
comment6.text=\n\ Gets\ the\ name\ with\ the\ given\ rank\ and\ gender\ in\ the\ given\ year's\ file\n\ @param\ year\n\ @param\ rank\n\ @param\ gender\ F\ for\ female,\ M\ for\ male\n\ @return\ the\ name,\ and\ the\ string\ "NO\ NAME"\ if\ the\ given\ rank\ is\ out\ of\ range\n
comment7.params=name\ year\ newYear\ gender
comment7.target=void\ whatIsNameInYear(java.lang.String,\ int,\ int,\ java.lang.String)
comment7.text=\n\ Gives\ the\ name\ in\ newYear\ with\ the\ same\ popularity\ ranks\ as\ the\ given\ name\ in\n\ the\ given\ year.\n\ @param\ name\n\ @param\ year\n\ @param\ newYear\n\ @param\ gender\ F\ for\ female,\ M\ for\ male\n
comment8.params=name\ gender
comment8.target=int\ yearOfHighestRank(java.lang.String,\ java.lang.String)
comment8.text=\n\ Selects\ a\ range\ of\ files\ and\ returns\ the\ year\ in\ which\ the\ given\ name,\ gender\ pair\n\ have\ the\ highest\ rank.\ Returns\ -1\ if\ the\ given\ name,\ gender\ pair\ does\ not\n\ appear\ in\ any\ of\ the\ selected\ files.\n\ @param\ name\n\ @param\ gender\n\ @return\n
comment9.params=name\ gender
comment9.target=double\ getAverageRank(java.lang.String,\ java.lang.String)
comment9.text=\n\ Calculates\ the\ average\ rank\ of\ a\ name-gender\ pair\ over\ selected\ files.\n\ @param\ name\n\ @param\ gender\ "M"\ for\ male,\ "F"\ for\ female\n\ @return\ the\ average\ rank,\ returns\ -1.0\ if\ name-gender\ pair\ not\ found\ in\ any\ of\ selected\n\ files\n
numComments=12
